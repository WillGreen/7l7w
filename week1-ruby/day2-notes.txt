# 7L7W Week 1 - Ruby: Day 2
# Notes for discussion and experimentation
# Will Green - http://flux.org.uk

Accessing files with and without blocks

    Without block:

        # File.open is synonymous for File.new without a block
        f = File.open('example.txt', 'r')  
        f.each_line { |l| puts l }
        f.close

    With block:

        File.open('example.txt', 'r') do |f| 
            f.each_line { |l| puts l }
        end

    Blocks seem similar to Python's 'with' statement, e.g. 
        with open('example.txt', 'r') as f:
        
    Haven't researched this much on the Ruby, but it seems blocks are they way to go. Blocks make sure exceptions are handled cleanly and that you don't forget to close the file.


Translate hash into array (and vice versa):

    Hashes can be converted into arrays of keys and values (very reminiscent of Python):

    hash.keys
    hash.values

    > animals = { 1 => 'lions', 2 => 'tigers', 3 => 'bears' }
    > animals.keys
     => [1, 2, 3] 
    > animals.values
     => ["lions", "tigers", "bears"] 

    To turn a hash into an array of array pairs:

    > animals.keys.zip(animals.values)
     => [[1, "lions"], [2, "tigers"], [3, "bears"]] 

    or, if you're feeling lazy ;)
    > animals.to_a
     => [[1, "lions"], [2, "tigers"], [3, "bears"]] 

    Depending on what you want, turning arrays into hashes is as simple as using the array in the constructor:

    animals_array = [1, 'lions', 2, 'tigers', 3, 'bears']
     => [1, "lions", 2, "tigers", 3, "bears"] 

    animals_hash = Hash[*animals_array]  # use splat to convert to many args - don't know if this is efficient!
     => {1=>"lions", 2=>"tigers", 3=>"bears"} 
    # won't work for arbitrary structures though, e.g. odd number of elements or array of arrays

    If it's a multi-dimensional array we could use the flatten method (e.g. an array of arrays holding two values).


Iterate through hash:

    Use one of the each methods with a block, for example:

    > animals.each_pair { |k, v| puts "#{k} = #{v}" }  # just .each also works
    1 = lions
    2 = tigers
    3 = bears
    => {1=>"lions", 2=>"tigers", 3=>"bears"} 


Array data structures

    stack - push, pop
    queue - push, shift
    list - we can use each methods to iterate over the array
